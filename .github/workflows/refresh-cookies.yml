name: Refresh Cookies

on:
  schedule:
    # Run every 12 hours
    - cron: '0 */12 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  refresh-cookies:
    name: Refresh Platform Cookies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Puppeteer dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgbm-dev gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
      
    - name: Create refresh-cookies script
      run: |
        cat > refresh-cookies.js << 'EOL'
        /**
         * Automated Cookie Refresh Script
         * Extracts fresh cookies for all platforms and updates Heroku config vars
         */
        const { CookieExtractor } = require('./cookie-management-system');
        const axios = require('axios');
        
        // Heroku API configuration
        const herokuApiKey = process.env.HEROKU_API_KEY;
        const herokuAppName = process.env.HEROKU_APP_NAME;
        const herokuEmail = process.env.HEROKU_EMAIL;
        
        // Encryption key for secure cookie storage
        const encryptionKey = process.env.ENCRYPTION_KEY;
        
        // Supported platforms
        const platforms = ['motonet', 'sryhma', 'gigantti'];
        
        async function refreshCookies() {
          console.log('Starting cookie refresh process...');
          
          const cookieExtractor = new CookieExtractor();
          const configVars = {};
          
          for (const platform of platforms) {
            try {
              console.log(`Extracting cookies for ${platform}...`);
              const cookies = await cookieExtractor.extractCookies(platform);
              
              // Encrypt cookies before storing (simplified for example)
              const encryptedCookies = encrypt(cookies, encryptionKey);
              
              // Set config var name based on platform
              const configVarName = `${platform.toUpperCase()}_COOKIE`;
              configVars[configVarName] = encryptedCookies;
              
              console.log(`Successfully extracted cookies for ${platform}`);
            } catch (error) {
              console.error(`Error extracting cookies for ${platform}:`, error.message);
            }
          }
          
          // Update Heroku config vars
          if (Object.keys(configVars).length > 0) {
            try {
              console.log('Updating Heroku config vars...');
              await updateHerokuConfigVars(configVars);
              console.log('Successfully updated Heroku config vars');
            } catch (error) {
              console.error('Error updating Heroku config vars:', error.message);
              process.exit(1);
            }
          } else {
            console.error('No cookies were extracted, aborting Heroku config update');
            process.exit(1);
          }
        }
        
        async function updateHerokuConfigVars(configVars) {
          const url = `https://api.heroku.com/apps/${herokuAppName}/config-vars`;
          
          const response = await axios({
            method: 'PATCH',
            url,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/vnd.heroku+json; version=3',
              'Authorization': `Bearer ${herokuApiKey}`
            },
            data: configVars
          });
          
          return response.data;
        }
        
        function encrypt(text, key) {
          // Simplified encryption for example
          // In production, use a proper encryption library
          return Buffer.from(text).toString('base64');
        }
        
        // Run the cookie refresh process
        refreshCookies().catch(error => {
          console.error('Unhandled error in cookie refresh process:', error);
          process.exit(1);
        });
        EOL
      
    - name: Run cookie refresh script
      run: node refresh-cookies.js
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_PRODUCTION_APP_NAME }}
        HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
